// 80. Remove Duplicates from Sorted Array II

 class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        
        HashMap<Integer, Integer> map = new HashMap<>();

        for(int num: nums ){
            map.put(num, map.getOrDefault(num,0)+1);
        }
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            if(entry.getValue() > n/2) return entry.getKey();
        }
        return -1;
    }
}
// using sort the array

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);

        return nums[n/2];
    }
}
// O(1) space

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;

        int votes = 0;
        int majority = 0;

        for(int num : nums){
            if(votes == 0){
                majority = num;
            }
             if(num == majority){
                votes++;
            }else{
                votes--;
            }
        }
        return majority;
    }
}


