// using temp array

class Solution {
    public void rotate(int[] arr, int k) {
       int n = arr.length;

    // Get the effective number of rotations:
       k = k % n;

       int[] temp = new int[k];

       for(int i = n - k; i < n; i++){
        temp[i-(n-k)] = arr[i];
       }

       for(int i = n - k -1; i >= 0; i-- ){
        arr[i + k] = arr[i];
       }
       for (int i = 0; i < k; i++) {
            arr[i] = temp[i];
        }

    }
}

// optimize solution using reverse the array

class Solution {

    public void reverse(int left, int right, int[] arr){
        while(left < right){
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] =  temp;
            left++;
            right--;
        }
    }

    public void rotate(int[] arr, int k) {
       int n = arr.length;
        k = k % n;

        reverse(0, n-1, arr);
        reverse(0, k-1, arr);
        reverse(k, n-1, arr);

    }
}
